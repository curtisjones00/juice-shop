/** The general, externally accessible plugin API (available at `app.plugins.plugins.dataview.api`). */
import { App, Component } from "obsidian";
import { FullIndex } from "../data";
import { DataObject, Link, LiteralValue, Values, Task } from "../data/value";
import { DataviewSettings } from "../settings";
import { DataArray } from "./data-array";
import { BoundFunctionImpl } from "../expression/functions";
import { Context } from "../expression/context";
import { DateTime, Duration } from "luxon";
import * as Luxon from "luxon";
import { DvAPIInterface, DvIOAPIInterface } from "../typings/api";
/** Asynchronous API calls related to file / system IO. */
export declare class DataviewIOApi implements DvIOAPIInterface {
    api: DataviewApi;
    constructor(api: DataviewApi);
    /** Load the contents of a CSV asynchronously, returning a data array of rows (or undefined if it does not exist). */
    csv(path: Link | string, originFile?: string): Promise<DataArray<DataObject> | undefined>;
    /** Asynchronously load the contents of any link or path in an Obsidian vault. */
    load(path: Link | string, originFile?: string): Promise<string | undefined>;
    /** Normalize a link or path relative to an optional origin file. Returns a textual fully-qualified-path. */
    normalize(path: Link | string, originFile?: string): string;
}
export declare class DataviewApi implements DvAPIInterface {
    app: App;
    index: FullIndex;
    settings: DataviewSettings;
    private verNum;
    /** Evaluation context which expressions can be evaluated in. */
    evaluationContext: Context;
    io: DataviewIOApi;
    /** Dataview functions which can be called from DataviewJS. */
    func: Record<string, BoundFunctionImpl>;
    /** Value utility functions for comparisons and type-checking. */
    value: typeof Values;
    /** Re-exporting of luxon for people who can't easily require it. Sorry! */
    luxon: typeof Luxon;
    constructor(app: App, index: FullIndex, settings: DataviewSettings, verNum: string);
    /** utils to check api version */
    version: DvAPIInterface["version"];
    /** Return an array of paths (as strings) corresponding to pages which match the query. */
    pagePaths(query?: string, originFile?: string): DataArray<string>;
    /** Map a page path to the actual data contained within that page. */
    page(path: string | Link, originFile?: string): Record<string, LiteralValue> | undefined;
    /** Return an array of page objects corresponding to pages which match the query. */
    pages(query?: string, originFile?: string): DataArray<Record<string, LiteralValue>>;
    /**
     * Convert an input element or array into a Dataview data-array. If the input is already a data array,
     * it is returned unchanged.
     */
    array(raw: unknown): DataArray<any>;
    /** Return true if theg given value is a javascript array OR a dataview data array. */
    isArray(raw: unknown): raw is DataArray<any> | Array<any>;
    /** Create a dataview file link to the given path. */
    fileLink(path: string, embed?: boolean, display?: string): Link;
    /** Attempt to extract a date from a string, link or date. */
    date(pathlike: string | Link | DateTime): DateTime | null;
    /** Attempt to extract a duration from a string or duration. */
    duration(str: string | Duration): Duration | null;
    /**
     * Compare two arbitrary JavaScript values using Dataview's default comparison rules. Returns a negative value if
     * a < b, 0 if a = b, and a positive value if a > b.
     */
    compare(a: any, b: any): number;
    /** Return true if the two given JavaScript values are equal using Dataview's default comparison rules. */
    equal(a: any, b: any): boolean;
    /** Render a dataview list of the given values. */
    list(values: any[] | DataArray<any> | undefined, container: HTMLElement, component: Component, filePath: string): void;
    /** Render a dataview table with the given headers, and the 2D array of values. */
    table(headers: string[], values: any[][] | DataArray<any> | undefined, container: HTMLElement, component: Component, filePath: string): void;
    /** Render a dataview task view with the given tasks. */
    taskList(tasks: Task[] | DataArray<any>, groupByFile: boolean | undefined, container: HTMLElement, component: Component, filePath?: string): Promise<void>;
    /** Render an arbitrary value into a container. */
    renderValue(value: any, container: HTMLElement, component: Component, filePath: string, inline?: boolean): Promise<void>;
}
