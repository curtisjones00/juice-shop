{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["export { DvAPIInterface as DataviewAPI } from \"./typings/api\";\n\n// Data Types\nexport type { DateTime, Duration } from \"luxon\";\nexport type {\n    Link,\n    Task,\n    DataObject,\n    LiteralType,\n    LiteralValue,\n    LiteralRepr,\n    WrappedLiteralValue,\n    LiteralValueWrapper,\n} from \"data/value\";\n\n// Dataview Index.\nexport type { FullIndex, PrefixIndex, IndexMap } from \"data/index\";\n\nimport \"obsidian\";\nimport { App } from \"obsidian\";\nimport { DvAPIInterface } from \"./typings/api\";\nimport { DvEventFullName, IndexEvtFullName } from \"./typings/events\";\n\n// EVENTS\n\ndeclare module \"obsidian\" {\n    interface MetadataCache {\n        /**\n         * @deprecated Not required anymore, though holding onto it for backwards-compatibility.\n         */\n        on(name: DvEventFullName<\"api-ready\">, callback: (api: DvAPIInterface) => void): EventRef;\n        /** Index events: Called when dataview metadata for a file changes. */\n        on(name: IndexEvtFullName, callback: (type: \"rename\", file: TAbstractFile, oldPath: string) => void): EventRef;\n        /** Index events: Called when a file is deleted from the dataview index. */\n        on(name: IndexEvtFullName, callback: (type: \"delete\" | \"update\", file: TFile) => void): EventRef;\n    }\n}\n\n// UTIL FUNCTIONS\n\nexport const getAPI = (app?: App): DvAPIInterface | undefined => {\n    if (app) return app.plugins.plugins.dataview?.api;\n    else return window[\"DataviewAPI\"];\n};\n\nexport const isPluginEnabled = (app: App) => app.plugins.enabledPlugins.has(\"dataview\");\n"],"names":[],"mappings":";;;;;;AAsCA;MAEa,MAAM,GAAG,CAAC,GAAS;;IAC5B,IAAI,GAAG;QAAE,OAAO,MAAA,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,0CAAE,GAAG,CAAC;;QAC7C,OAAO,MAAM,CAAC,aAAa,CAAC,CAAC;AACtC,EAAE;MAEW,eAAe,GAAG,CAAC,GAAQ,KAAK,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU;;;;;"}