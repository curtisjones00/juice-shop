export { DvAPIInterface as DataviewAPI } from "./typings/api";
export type { DateTime, Duration } from "luxon";
export { Link, Task, DataObject, LiteralType, LiteralValue, LiteralRepr, WrappedLiteralValue, LiteralValueWrapper, } from "./data/value";
export { FullIndex, PrefixIndex, IndexMap } from "./data/index";
import "obsidian";
import { App } from "obsidian";
import { DvAPIInterface } from "./typings/api";
import { DvEventFullName, IndexEvtFullName } from "./typings/events";
declare module "obsidian" {
    interface MetadataCache {
        /**
         * @deprecated Not required anymore, though holding onto it for backwards-compatibility.
         */
        on(name: DvEventFullName<"api-ready">, callback: (api: DvAPIInterface) => void): EventRef;
        /** Index events: Called when dataview metadata for a file changes. */
        on(name: IndexEvtFullName, callback: (type: "rename", file: TAbstractFile, oldPath: string) => void): EventRef;
        /** Index events: Called when a file is deleted from the dataview index. */
        on(name: IndexEvtFullName, callback: (type: "delete" | "update", file: TFile) => void): EventRef;
    }
}
export declare const getAPI: (app?: App | undefined) => DvAPIInterface | undefined;
export declare const isPluginEnabled: (app: App) => boolean;
